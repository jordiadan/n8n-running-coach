name: Deploy running-coach (staging -> prod)

on:
  push:
    branches: [ main ]           # cada commit a main -> STAGING
  release:
    types: [ published ]         # publicar release -> PROD
  workflow_dispatch: {}          # ejecución manual opcional

jobs:
  deploy-staging:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-running-coach-n8n-staging
      cancel-in-progress: true
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_APP: running-coach-n8n-staging
      STAGING_N8N_ENCRYPTION_KEY: ${{ secrets.STAGING_N8N_ENCRYPTION_KEY }} # opcional

    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Bootstrap STAGING (app/volume if missing)
        run: |
          set -e
          # crea app si no existe
          if ! flyctl apps list --json | jq -r '.[].Name' | grep -qx "$FLY_APP"; then
            flyctl apps create "$FLY_APP"
          fi
          # crea volumen "n8n_data" si no existe
          if ! flyctl volumes list -a "$FLY_APP" | grep -q '^'n8n_data'\b'; then
            flyctl volumes create n8n_data --region fra --size 1 -a "$FLY_APP" --yes
          fi

      - name: Ensure N8N_ENCRYPTION_KEY (STAGING)
        if: ${{ env.STAGING_N8N_ENCRYPTION_KEY != '' }}
        run: |
          if ! flyctl secrets list -a "$FLY_APP" | grep -q '^N8N_ENCRYPTION_KEY\b'; then
            flyctl secrets set N8N_ENCRYPTION_KEY="$STAGING_N8N_ENCRYPTION_KEY" -a "$FLY_APP"
          else
            echo "N8N_ENCRYPTION_KEY already set for $FLY_APP"
          fi

      - name: Deploy to STAGING
        run: flyctl deploy -a "$FLY_APP" --config fly.toml

      - name: Wait health checks (STAGING)
        run: |
          for i in {1..36}; do
            NOT_OK=$(flyctl checks list -a "$FLY_APP" | awk 'NR>1 {print $3}' | grep -v passing || true)
            if [ -z "$NOT_OK" ]; then echo "✅ STAGING healthy"; exit 0; fi
            echo "⏳ Waiting STAGING health checks..."
            sleep 5
          done
          echo "⚠️ STAGING checks not fully passing (continuing)"

      - name: Detect changed workflows
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            wf:
              - 'workflows/**.json'

      - name: Install n8n CLI (only if workflows changed)
        if: steps.changes.outputs.wf == 'true'
        run: npm i -g n8n

      - name: Import workflows to STAGING (only if changed)
        if: steps.changes.outputs.wf == 'true'
        env:
          N8N_BASIC_AUTH_USER: ${{ secrets.N8N_BASIC_AUTH_USER }}
          N8N_BASIC_AUTH_PASSWORD: ${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
        run: |
          set -e
          HOST=$(flyctl status -a "$FLY_APP" --json | jq -r '.Hostname // .App.Hostname')
          [ -n "$HOST" ] || { echo "❌ Could not resolve STAGING hostname"; exit 1; }
          AUTH=""
          if [ -n "$N8N_BASIC_AUTH_USER" ] && [ -n "$N8N_BASIC_AUTH_PASSWORD" ]; then
            AUTH="--user $N8N_BASIC_AUTH_USER --password $N8N_BASIC_AUTH_PASSWORD"
          fi
          shopt -s nullglob
          FILES=(workflows/*.json)
          [ ${#FILES[@]} -eq 0 ] && echo "No workflows to import" && exit 0
          n8n import:workflow --input="workflows/*.json" --url "https://$HOST" $AUTH
          echo "✅ Imported to STAGING"

      # (Opcional) activar autostop para staging barato:
      # - name: Enable autostop (STAGING)
      #   run: |
      #     flyctl machines list -a "$FLY_APP" -q \
      #     | xargs -I{} flyctl machines update {} -a "$FLY_APP" --autostop stop --autostart

  deploy-prod:
    needs: [deploy-staging]
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-running-coach-n8n-prod
      cancel-in-progress: true
    environment:
      name: production
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_APP: running-coach-n8n

    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to PROD (release)
        run: flyctl deploy -a "$FLY_APP" --config fly.toml

      - name: Wait health checks (PROD)
        run: |
          for i in {1..36}; do
            NOT_OK=$(flyctl checks list -a "$FLY_APP" | awk 'NR>1 {print $3}' | grep -v passing || true)
            if [ -z "$NOT_OK" ]; then echo "✅ PROD healthy"; exit 0; fi
            echo "⏳ Waiting PROD health checks..."
            sleep 5
          done
          echo "⚠️ PROD checks not fully passing (continuing)"

      - name: Detect changed workflows
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            wf:
              - 'workflows/**.json'

      - name: Install jq & n8n CLI (only if workflows changed)
        if: steps.changes.outputs.wf == 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          npm i -g n8n

      - name: Import workflows to PROD (only if changed)
        if: steps.changes.outputs.wf == 'true'
        env:
          N8N_BASIC_AUTH_USER: ${{ secrets.N8N_BASIC_AUTH_USER }}
          N8N_BASIC_AUTH_PASSWORD: ${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
        run: |
          set -e
          HOST=$(flyctl status -a "$FLY_APP" --json | jq -r '.Hostname // .App.Hostname')
          [ -n "$HOST" ] || { echo "❌ Could not resolve PROD hostname"; exit 1; }
          AUTH=""
          if [ -n "$N8N_BASIC_AUTH_USER" ] && [ -n "$N8N_BASIC_AUTH_PASSWORD" ]; then
            AUTH="--user $N8N_BASIC_AUTH_USER --password $N8N_BASIC_AUTH_PASSWORD"
          fi
          shopt -s nullglob
          FILES=(workflows/*.json)
          [ ${#FILES[@]} -eq 0 ] && echo "No workflows to import" && exit 0
          n8n import:workflow --input="workflows/*.json" --url "https://$HOST" $AUTH
          echo "✅ Imported to PROD"
