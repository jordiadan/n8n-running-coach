name: Deploy n8n to Fly (image bump)

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'fly.toml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP: running-coach-n8n
      # Si algún día quieres usar otra región para el deploy, cámbialo en fly.toml,
      # no hace falta poner REGION aquí.
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verificar secrets
        shell: bash
        run: |
          [ -z "${{ secrets.FLY_API_TOKEN }}" ] && { echo "❌ Falta FLY_API_TOKEN"; exit 1; }
          [ -z "${{ secrets.N8N_ENCRYPTION_KEY }}" ] && { echo "❌ Falta N8N_ENCRYPTION_KEY"; exit 1; }
          echo "✅ Secrets OK"

      - name: Instalar flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: latest

      - name: Autenticarse en Fly
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Con solo exportar FLY_API_TOKEN ya vale, pero dejamos whoami para confirmar
          flyctl auth whoami

      - name: Asegurar secret N8N_ENCRYPTION_KEY en la app (sin redeploy)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}
        run: |
          # --stage escribe el secret pero NO despliega (evita un deploy “extra”
          # antes del nuestro).
          flyctl secrets set N8N_ENCRYPTION_KEY="$N8N_ENCRYPTION_KEY" -a "$APP" --stage

      - name: Deploy a Fly
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Construye la imagen con tu Dockerfile (que Dependabot acaba de actualizar)
          # y despliega la app leyendo tu fly.toml del repo.
          # --remote-only usa el builder remoto de Fly (más estable en GH runners).
          flyctl deploy -a "$APP" --remote-only
