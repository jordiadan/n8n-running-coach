name: Deploy n8n to Fly (production)

on:
  workflow_dispatch:
    inputs:
      app:
        description: "Nombre del app en Fly"
        required: true
        default: "running-coach-n8n"     # <-- AJ√öSTALO si tu app prod se llama distinto
      region:
        description: "Regi√≥n Fly"
        required: true
        default: "fra"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP: ${{ github.event.inputs.app }}
      REGION: ${{ github.event.inputs.region }}
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Verifica secretos
        run: |
          set -e
          [ -z "$FLY_API_TOKEN" ] && { echo "‚ùå Falta FLY_API_TOKEN en GitHub Secrets"; exit 1; }
          [ -z "$N8N_ENCRYPTION_KEY" ] && { echo "‚ùå Falta N8N_ENCRYPTION_KEY en GitHub Secrets"; exit 1; }

      - name: Crea volumen si no existe
        run: |
          set -e
          if ! flyctl volumes list -a "$APP" | grep -q 'n8n_data'; then
            echo "üß± creando volumen n8n_data"
            flyctl volumes create n8n_data -a "$APP" --region "$REGION" --size 1
          else
            echo "‚úÖ volumen n8n_data ya existe"
          fi

      - name: Asegura N8N_ENCRYPTION_KEY en Fly
        run: |
          set -e
          if ! flyctl secrets list -a "$APP" | grep -q '^N8N_ENCRYPTION_KEY\b'; then
            echo "üîê seteando N8N_ENCRYPTION_KEY"
            flyctl secrets set N8N_ENCRYPTION_KEY="$N8N_ENCRYPTION_KEY" -a "$APP"
          else
            echo "‚úÖ N8N_ENCRYPTION_KEY ya est√° en Fly"
          fi

      - name: Deploy app (fly.toml)
        run: |
          set -e
          flyctl deploy -a "$APP" --config fly.toml

      - name: Espera a que arranque
        run: |
          set -e
          # Esperamos a que conteste el health b√°sico en el proxy
          for i in {1..60}; do
            if flyctl checks list -a "$APP" | awk 'NR>1 {print $3}' | grep -q '^passing$'; then
              echo "‚úÖ health passing"
              break
            fi
            echo "‚è≥ esperando health... ($i)"
            sleep 5
          done

      - name: Sube workflows del repo a la m√°quina (SFTP)
        run: |
          set -e
          shopt -s nullglob
          WF=(workflows/*.json)
          if [ ${#WF[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è No hay workflows/*.json que subir"
            exit 0
          fi
          # Crea el dir destino y sube
          flyctl ssh console -a "$APP" -C 'mkdir -p /home/node/import'
          # Sube todos los JSON
          for f in workflows/*.json; do
            echo "‚¨ÜÔ∏è subiendo $f"
            flyctl ssh sftp -a "$APP" -C "put $f /home/node/import/"
          done

      - name: Importa workflows en PRODUCCI√ìN
        run: |
          set -e
          flyctl ssh console -a "$APP" -C 'n8n import:workflow --input "/home/node/import/*.json" && n8n list:workflow'
